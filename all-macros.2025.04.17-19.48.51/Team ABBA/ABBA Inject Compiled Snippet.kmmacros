<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>Activate</key>
		<string>Normal</string>
		<key>CreationDate</key>
		<real>743371598.00417197</real>
		<key>Macros</key>
		<array>
			<dict>
				<key>Actions</key>
				<array>
					<dict>
						<key>ActionName</key>
						<string>Check &amp; Warn if Adobe Target is Enabled</string>
						<key>ActionUID</key>
						<integer>835163</integer>
						<key>Actions</key>
						<array>
							<dict>
								<key>ActionUID</key>
								<integer>835164</integer>
								<key>MacroActionType</key>
								<string>ExecuteSubroutine</string>
								<key>MacroUID</key>
								<string>6971C617-550A-4E20-9A4D-9F851EEB630B</string>
								<key>Parameters</key>
								<array/>
								<key>ResultVariable</key>
								<string>instance_TargetEnabled</string>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
							<dict>
								<key>ActionUID</key>
								<integer>835165</integer>
								<key>Conditions</key>
								<dict>
									<key>ConditionList</key>
									<array>
										<dict>
											<key>ConditionType</key>
											<string>Variable</string>
											<key>Variable</key>
											<string>instance_TargetEnabled</string>
											<key>VariableConditionType</key>
											<string>Is</string>
											<key>VariableValue</key>
											<string>true</string>
										</dict>
									</array>
									<key>ConditionListMatch</key>
									<string>All</string>
								</dict>
								<key>ElseActions</key>
								<array/>
								<key>MacroActionType</key>
								<string>IfThenElse</string>
								<key>ThenActions</key>
								<array>
									<dict>
										<key>ActionUID</key>
										<integer>835168</integer>
										<key>Actions</key>
										<array>
											<dict>
												<key>ActionUID</key>
												<integer>835166</integer>
												<key>Buttons</key>
												<array>
													<dict>
														<key>Button</key>
														<string>OK</string>
													</dict>
													<dict>
														<key>Button</key>
														<string>Cancel</string>
														<key>Cancel</key>
														<true/>
													</dict>
												</array>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>PromptForUserInput</string>
												<key>Prompt</key>
												<string>Adobe Target is currently enabled. Do you still want to inject a compiled A/B test on top of whatever Adobe Target is already injecting?</string>
												<key>TimeOutAbortsMacro</key>
												<true/>
												<key>Title</key>
												<string>WARNING: Adobe Taret is Currently Enabled</string>
												<key>Variables</key>
												<array/>
											</dict>
											<dict>
												<key>Action</key>
												<string>CenterWindow</string>
												<key>ActionUID</key>
												<integer>835167</integer>
												<key>HeightExpression</key>
												<string>300</string>
												<key>HorizontalExpression</key>
												<string>125</string>
												<key>IsDisclosed</key>
												<false/>
												<key>MacroActionType</key>
												<string>ManipulateWindow</string>
												<key>TargetApplication</key>
												<dict>
													<key>BundleIdentifier</key>
													<string>com.stairways.keyboardmaestro.editor</string>
													<key>Name</key>
													<string>Keyboard Maestro</string>
													<key>NewFile</key>
													<string>/Applications/Keyboard Maestro.app</string>
												</dict>
												<key>Targeting</key>
												<string>FrontWindow</string>
												<key>TargetingType</key>
												<string>Specific</string>
												<key>VerticalExpression</key>
												<string>125</string>
												<key>WidthExpression</key>
												<string>300</string>
												<key>WindowIndexExpression</key>
												<string>2</string>
												<key>WindowName</key>
												<string></string>
											</dict>
										</array>
										<key>MacroActionType</key>
										<string>Group</string>
										<key>TimeOutAbortsMacro</key>
										<true/>
									</dict>
								</array>
								<key>TimeOutAbortsMacro</key>
								<true/>
							</dict>
						</array>
						<key>MacroActionType</key>
						<string>Group</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>823454</integer>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string></string>
						<key>Subtitle</key>
						<string>Finding snippet %Variable%snipIndicator%...</string>
						<key>Text</key>
						<string></string>
						<key>Title</key>
						<string>%ExecutingMacro%</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>835158</integer>
						<key>MacroActionType</key>
						<string>ExecuteSubroutine</string>
						<key>MacroUID</key>
						<string>DA741977-F610-4F08-A741-B0CC0A1B4E83</string>
						<key>Parameters</key>
						<array/>
						<key>ResultVariable</key>
						<string>instance_CookieValue</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>823450</integer>
						<key>DisplayKind</key>
						<string>Variable</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteShellScript</string>
						<key>Path</key>
						<string></string>
						<key>Source</key>
						<string>Nothing</string>
						<key>Text</key>
						<string>indicator="$KMVAR_snipIndicator"
$HOME/bin/underarmour/wkd-snippet-copy "$indicator" # copies compiled snipped to system clipboard</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseText</key>
						<true/>
						<key>Variable</key>
						<string>snippet</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>823456</integer>
						<key>MacroActionType</key>
						<string>SetVariableToText</string>
						<key>Text</key>
						<string>&lt;html&gt;
&lt;body&gt;
%Variable%snippet%
&lt;/body&gt;
&lt;/html&gt;

</string>
						<key>Variable</key>
						<string>injectableHtml</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>824583</integer>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string></string>
						<key>Subtitle</key>
						<string>Found snippet %Variable%snipIndicator%. Injecting...</string>
						<key>Text</key>
						<string></string>
						<key>Title</key>
						<string>%ExecutingMacro%</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>823452</integer>
						<key>DisplayKind</key>
						<string>None</string>
						<key>HonourFailureSettings</key>
						<true/>
						<key>IncludeStdErr</key>
						<false/>
						<key>IncludedVariables</key>
						<array>
							<string>9999</string>
						</array>
						<key>MacroActionType</key>
						<string>ExecuteJavaScript</string>
						<key>Path</key>
						<string></string>
						<key>Text</key>
						<string>/**
 * Originally built to streamline the ECT loop for Under Armour.
 * Expects the HTML to be a fragment with two tags: &lt;style&gt; &amp; &lt;script&gt;.
 *
 */
(function () {
    function getParsedStyleJs(html) {
        let doc = new DOMParser().parseFromString(html, 'text/html');
        let style = doc.querySelector('body &gt; style');
        let styleText = style ? style.innerText : undefined;
        let styleClasses = style ? [...style.classList] : undefined;

        let script = doc.querySelector('body &gt; script');
        let jsText = script ? script.innerText : undefined;
        let jsClasses = script ? [...script.classList] : undefined;

        return { styleText, styleClasses, jsText, jsClasses };
    }

    function injectStyleJs({ styleText, styleClasses, jsText, jsClasses }) {
        let body = document.querySelector('body');
        let container = document.createElement('div');
        container.classList.add('km-injected');
        body.appendChild(container);

        if (styleText) {
            let style = document.createElement('style');
            style.innerHTML = styleText;
            style.classList = styleClasses;
            container.appendChild(style);
        } else {
            console.warn('No style text found in injectable HTML');
        }

        if (jsText) {
            let script = document.createElement('script');
	    script.classList.add('ABBA-injected');
            script.innerHTML = jsText;
            script.classList = jsClasses;
            container.appendChild(script);
        } else {
            console.warn('No script text found in injectable HTML');
        }
    }

    try {
        let html = document.kmvar.injectableHtml;
        injectStyleJs(getParsedStyleJs(html));
        //alert('Team ABBA Test Code injected');
    } catch (e) {
        alert('Error injecting Team ABBA Test Code');
        console.error({ message: 'Error injecting Team ABBA Test Code', error: e });
    }
}());
</string>
						<key>TimeOutAbortsMacro</key>
						<true/>
						<key>TrimResults</key>
						<true/>
						<key>TrimResultsNew</key>
						<true/>
						<key>UseModernSyntax</key>
						<false/>
						<key>UseText</key>
						<true/>
						<key>WebBrowser</key>
						<string>Front Browser</string>
					</dict>
					<dict>
						<key>ActionUID</key>
						<integer>824584</integer>
						<key>MacroActionType</key>
						<string>Notification</string>
						<key>SoundName</key>
						<string></string>
						<key>Subtitle</key>
						<string>Snippet %Variable%snippetIndicator% injected.</string>
						<key>Text</key>
						<string></string>
						<key>Title</key>
						<string>%ExecutingMacro%</string>
					</dict>
				</array>
				<key>CreationDate</key>
				<real>716426724.73290598</real>
				<key>ModificationDate</key>
				<real>746055810.55652905</real>
				<key>Name</key>
				<string>ABBA Inject Compiled Snippet</string>
				<key>Triggers</key>
				<array>
					<dict>
						<key>MacroTriggerType</key>
						<string>Subroutine</string>
						<key>Parameters</key>
						<array>
							<string>snipIndicator</string>
						</array>
						<key>ReturnsValue</key>
						<false/>
					</dict>
				</array>
				<key>UID</key>
				<string>56CFD269-521E-4BBD-9B8D-C4AB0B2D7E5A</string>
			</dict>
		</array>
		<key>Name</key>
		<string>Team ABBA</string>
		<key>ToggleMacroUID</key>
		<string>45801DCA-3C53-477C-B01F-8E7C1ECAC704</string>
		<key>UID</key>
		<string>47333596-2996-462D-AEA7-98FBE9B6D97D</string>
	</dict>
</array>
</plist>
